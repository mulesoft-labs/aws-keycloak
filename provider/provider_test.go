package provider_test

import (
	"bytes"
	"errors"
	"io/ioutil"
	"os"
	"testing"

	"github.com/aws/aws-sdk-go/service/sts"
	"github.com/golang/mock/gomock"
	"github.com/mulesoft-labs/aws-keycloak/provider"
	"github.com/mulesoft-labs/aws-keycloak/provider/mock_provider"
	"github.com/mulesoft-labs/aws-keycloak/provider/saml"
	log "github.com/sirupsen/logrus"
)

var (
	inputBuffer = bytes.Buffer{}
)

// Shared by all tests in this package
func TestMain(m *testing.M) {
	log.SetLevel(log.PanicLevel)
	provider.ProviderIn = &inputBuffer
	provider.ProviderOut = ioutil.Discard
	provider.ProviderErr = ioutil.Discard
	os.Exit(m.Run())
}

func TestRetrieve(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	awsrole := "admin-identity"
	var samlStruct saml.SAMLStruct
	if err := saml.Parse([]byte(GoodSaml), &samlStruct); err != nil {
		t.Error("Couldn't parse saml")
	}

	keyid := "good-keyid"
	goodcreds := sts.Credentials{
		AccessKeyId: &keyid,
	}

	k := mock_provider.NewMockKeycloakProviderIf(ctrl)
	k.EXPECT().BrowserAuth().Return(nil)
	k.EXPECT().GetSamlAssertion().Return(samlStruct, nil)

	a := mock_provider.NewMockAwsProviderIf(ctrl)
	a.EXPECT().CheckAlreadyAuthd(awsrole).Return(sts.Credentials{}, errors.New("not authd"))
	a.EXPECT().AssumeRoleWithSAML(saml.RolePrincipal{Role: "arn:aws:iam::003617316831:role/keycloak-admin-identity", Principal: "arn:aws:iam::003617316831:saml-provider/keycloak-provider"}, gomock.Any()).Return(goodcreds, nil)
	a.EXPECT().StoreAwsCreds(goodcreds, awsrole)

	p := provider.Provider{
		K: k,
		A: a,
	}

	creds, role, err := p.Retrieve(awsrole)
	if creds != goodcreds {
		t.Errorf("Wrong credentials returned: %v", creds)
	}
	if role != awsrole {
		t.Errorf("Wrong aws role returned: %v", role)
	}
	if err != nil {
		t.Error("How is there an error?")
	}
}

func TestAlreadyAuthd(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	awsrole := "admin-identity"

	keyid := "good-keyid"
	goodcreds := sts.Credentials{
		AccessKeyId: &keyid,
	}

	k := mock_provider.NewMockKeycloakProviderIf(ctrl)
	//k.EXPECT().BrowserAuth
	//k.EXPECT().GetSamlAssertion

	a := mock_provider.NewMockAwsProviderIf(ctrl)
	a.EXPECT().CheckAlreadyAuthd(awsrole).Return(goodcreds, nil)
	//a.EXPECT().AssumeRoleWithSAML
	//a.EXPECT().StoreAwsCreds

	p := provider.Provider{
		K: k,
		A: a,
	}

	creds, role, err := p.Retrieve(awsrole)
	if creds != goodcreds {
		t.Errorf("Wrong credentials returned: %v", creds)
	}
	if role != awsrole {
		t.Errorf("Wrong aws role returned: %v", role)
	}
	if err != nil {
		t.Error("How is there an error?")
	}
}

func TestDontStoreKeycloakCredsAgain(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	awsrole := "admin-identity"
	var samlStruct saml.SAMLStruct
	if err := saml.Parse([]byte(GoodSaml), &samlStruct); err != nil {
		t.Error("Couldn't parse saml")
	}

	keyid := "good-keyid"
	goodcreds := sts.Credentials{
		AccessKeyId: &keyid,
	}

	k := mock_provider.NewMockKeycloakProviderIf(ctrl)
	k.EXPECT().BrowserAuth().Return(nil)
	k.EXPECT().GetSamlAssertion().Return(samlStruct, nil)

	a := mock_provider.NewMockAwsProviderIf(ctrl)
	a.EXPECT().CheckAlreadyAuthd(awsrole).Return(sts.Credentials{}, errors.New("not authd"))
	a.EXPECT().AssumeRoleWithSAML(gomock.Any(), gomock.Any()).Return(goodcreds, nil)
	a.EXPECT().StoreAwsCreds(goodcreds, awsrole)

	p := provider.Provider{
		K: k,
		A: a,
	}

	// ignore results in this test
	p.Retrieve(awsrole)
}

const GoodSaml = `<HTML><HEAD><TITLE>SAML HTTP Post Binding</TITLE></HEAD><BODY Onload="document.forms[0].submit()"><FORM METHOD="POST" ACTION="https://signin.aws.amazon.com/saml"><INPUT TYPE="HIDDEN" NAME="SAMLResponse" VALUE=""/><NOSCRIPT><P>JavaScript is disabled. We strongly recommend to enable it. Click the button below to continue.</P><INPUT TYPE="SUBMIT" VALUE="CONTINUE" /></NOSCRIPT></FORM></BODY></HTML>`
